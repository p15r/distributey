version: "3.7"

services:
  reverseproxy:
    image: nginxinc/nginx-unprivileged:stable-alpine
    container_name: nginx
    hostname: nginx
    restart: always
    command: ["sh", "-c", "sleep 10 && nginx -g 'daemon off;'"]
    logging:
      driver: syslog
      options:
        tag: "{{.Name}}/{{.ID}}"
    ports:
      - target: 8443
        published: 443
        protocol: tcp
    volumes:
      - ./docker/nginx.conf:/etc/nginx/conf.d/hyok-wrapper.conf:ro
      - ./docker/certs:/etc/nginx/certs:ro
    depends_on:
      - hyok-wrapper
      - vault-agent

  hyok-wrapper:
    image: pat/hyok-wrapper:0.1
    container_name: hyok-wrapper
    hostname: hyok-wrapper
    restart: always
    build:
      context: .
      dockerfile: docker/hyok-wrapper-dockerfile
    logging:
      driver: syslog
      options:
        tag: "{{.Name}}/{{.ID}}"
    depends_on: # Comment for production.
      - vault   # Comment for production.

###################################
# Comment until EOF for production.
###################################

  vault:
    image: vault:1.5.3
    container_name: vault
    hostname: vault
    restart: always
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root          # server config
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200 # server config
      - VAULT_ADDR=http://127.0.0.1:8200      # cli config
      - VAULT_TOKEN=root                      # cli config
    ports:
      - target: 8200
        published: 8200
        protocol: tcp

  terraform:
    image: hashicorp/terraform:light
    container_name: terraform
    hostname: terraform
    # remove state from old Vault dev mode, init, re-apply and leave running for debugging purposes
    # sleep() gives `01-start.sh` time to install Terraform providers
    entrypoint: "/bin/sh -c 'rm -rf .terraform && rm -rf terraform.tfstate* && terraform init -plugin-dir /terraform/tf-cache && terraform apply -auto-approve && sleep 3600'"
    working_dir: "/terraform"
    environment:
      # - TF_LOG=debug
      - VAULT_ADDR=http://vault:8200          # tf config
      - VAULT_TOKEN=root                      # tf config
      - CHECKPOINT_DISABLE=true               # prevent tf from checking for updates
    volumes:
      - ./docker/terraform:/terraform
      - approle:/approle          # write approle secret id to volume shared with vault-agent
    depends_on:
      - vault

  vault-agent:
    image: vault:1.5.3
    container_name: vault-agent
    hostname: vault-agent
    build:
      context: docker/vault-agent/
      dockerfile: Dockerfile
    cap_add:
      - IPC_LOCK
    command: ["agent", "-config", "/vault/config/vault-agent.hcl"]
    volumes:
      - ./docker/vault-agent/config:/vault/config
      - approle:/approle
    depends_on:
    - terraform

volumes:
  # Shared mount between vault-agent and terraform
  # to provision AppRole authentication credentials.
  # Terraform on Docker is the Trusted Orchestrator:
  # https://learn.hashicorp.com/tutorials/vault/secure-introduction
  approle:
